import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.optimizers import Adam
file_path = 'TTM_NYSE_01Oct20-01Oct21.csv'
df = pd.read_csv(file_path)
data = df['Close'].values.reshape(-1, 1)
scaler = MinMaxScaler(feature_range=(0, 1))
data_normalized = scaler.fit_transform(data)
train_size = int(len(data_normalized) * 0.80)
train_data = data_normalized[:train_size]
test_data = data_normalized[train_size:]
def create_sequences(data, seq_length):
    sequences = []
    for i in range(len(data) -seq_length):
        sequence = data[i:i + seq_length]
        sequences.append(sequence)
    return np.array(sequences)
# Define sequence length
sequence_length = 10
# Create sequencesfortraining
X_train = create_sequences(train_data, sequence_length)
y_train = train_data[sequence_length:]
# Create sequencesfortesting
X_test = create_sequences(test_data, sequence_length)
y_test = test_data[sequence_length:]
# Build the LSTM model
model = Sequential([
LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
LSTM(units=50),
Dense(units=1)
])
# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error')
# Train the model
history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test,
y_test))
# Plot training and validation loss
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()
